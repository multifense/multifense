using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Net.Sockets;
using System.Net;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace C_SharpClient_1._1
{
    public class Game1 : Microsoft.Xna.Framework.Game
    {
        Hashtable monsterHash = new Hashtable();

        List<GameObject> bufferListToPrint = new List<GameObject>();
        //things are added from lstToPrint to garbageList to remove it
        List<GameObject> garbageList = new List<GameObject>();

        GameSession gameSession = new GameSession("Windows");
        //Manage the window/inital values
        GraphicsDeviceManager graphics;
        //Draw on the screen
        SpriteBatch spriteBatch;

        private bool isMouseDown = false;
        //A slow downer ;) for buttons pressed so it dont go so fast
        private int tot_time = 0; //how often it updates monster information(as of now)

        Tower superTower;
        Tower myCurrentTower;
        Texture2D txt2DBuildCircleGreen; Texture2D txt2DBuildCircleRed;

        private Texture2D txtWin;
        private Texture2D txtLose;

        /// <summary>
        /// Setup Important stuff for the game;
        /// </summary>
        public Game1()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
            //Set window Size
            graphics.PreferredBackBufferHeight = 600;
            graphics.PreferredBackBufferWidth = 800;
            this.IsMouseVisible = true;
            graphics.IsFullScreen = true;
        }
        
        //Initlize D3D Egine (Autogenerated by MS)
        protected override void Initialize()
        {
            base.Initialize();
        }

        /// <summary>
        /// Loads the Content for the game (Only once)
        /// </summary>
        protected override void LoadContent()
        {
            spriteBatch = new SpriteBatch(GraphicsDevice);
            try
            {
                gameSession.fontTimesNewSimon = Content.Load<SpriteFont>("TimesNewSimon");
                gameSession.LoadMap(gameSession.mapNumber, this);
                gameSession.sharedModule.LoadContent(this);
                gameSession.LoadContent(Content.Load<Texture2D>("statusmenu"));

                if (gameSession.sounds == null)
                    gameSession.sounds = new Sounds(this);
                if (gameSession.player.isSinglePlayer)
                    txtLose = Content.Load<Texture2D>("gameOver");
                else
                    txtLose = Content.Load<Texture2D>("youLose");
                txtWin = Content.Load<Texture2D>("youwin");
                txt2DBuildCircleGreen = Content.Load<Texture2D>("Range"); txt2DBuildCircleRed = Content.Load<Texture2D>("NoRange");
                gameSession.SetUpMonsterWave();

                if (gameSession.mainMenu == null)
                    gameSession.mainMenu = new MainMenu(ref gameSession, Content.Load<Texture2D>("startb"), Content.Load<Texture2D>("quickb"), Content.Load<Texture2D>("start"), Content.Load<Texture2D>("scroll"), Content.Load<Texture2D>("resumeb"), Content.Load<Texture2D>("searching-top"), Content.Load<Texture2D>("getready-top"), Content.Load<Texture2D>("background"));


                superTower = new Tower(Content.Load<Texture2D>("torn"), new Rectangle(0, 0, 50, 50), 1, 5, 10000, Content.Load<Texture2D>("torn"), -100000, Content.Load<SoundEffect>("cannon"), 30);
                
                myCurrentTower = gameSession.fireTower;
                myCurrentTower.typeOfTower = "FireTower";
                //Init the userInterFace
                gameSession.ui = new UserInterface(this, superTower, Content.Load<Texture2D>("scroll"),Content.Load<Texture2D>("build"), Content.Load<Texture2D>("EconomyIcon"), Content.Load<Texture2D>("players"), gameSession);
                gameSession.ui.console = gameSession.console;
                gameSession.ui.txtBoxinformation = gameSession.informationBox;
                if (!gameSession.player.isSinglePlayer)
                    gameSession.ui.InitMonsterSpawner(Content.Load<Texture2D>("monstericon"));
            }
            catch (Exception ex)
            {
                System.Windows.Forms.MessageBox.Show(ex.ToString());
                System.Windows.Forms.MessageBox.Show(ex.ToString().Split('"')[1] + " Could not be loaded");
                this.Exit();
            }
        }

        protected override void UnloadContent()
        {
            gameSession.listToPrint.Clear();
            garbageList.Clear();
            bufferListToPrint.Clear();
        }
        /// <summary>
        /// Uppdate the game and take Input/Output
        /// </summary>
        /// <param name="gameTime">GameTime, information om hur länge spelet varit igång</param>
        protected override void Update(GameTime gameTime)
        {
            if (Keyboard.GetState().IsKeyDown(Keys.Delete))
                this.Exit();

            //What to do if game is started
            if (gameSession.mainMenu.GameStart)
            {
                //Quik fix for player dead
                if (gameSession.player.hp < 1 && gameSession.player.isSinglePlayer)
                    gameSession.YouLose();
                tot_time += gameTime.ElapsedGameTime.Milliseconds;
                while (tot_time > 32)
                {
                    //om LMclick och tornet finns inte på location, lägg till torn i spritelist
                    if (!isMouseDown && !IsMouseVisible && Mouse.GetState().LeftButton == ButtonState.Pressed && checkIfTowerNotOnLocation(new Rectangle(Mouse.GetState().X - 25, Mouse.GetState().Y - 25, 50, 50)))
                    {
                        IsMouseVisible = true;
                        if (gameSession.player.gold > (myCurrentTower.price - 1))
                        {
                            gameSession.listToPrint.Add((Tower)myCurrentTower.Clone(Mouse.GetState().X - 25 - gameSession.map.Rec.X, Mouse.GetState().Y - 25 - gameSession.map.Rec.Y));
                            gameSession.player.gold -= myCurrentTower.price;
                        }
                    }

                    //Multiplayer uppdate
                    if (gameSession.player.isSinglePlayer == false)
                    {
                        if (gameSession.multiMobWave != null)
                            gameSession.multiMobWave.Update(gameTime);

                    }

                    gameSession.ui.Update(gameTime, ref myCurrentTower, ref gameSession, IsMouseVisible);
                    gameSession.ui.UpdateScroll(ref gameSession.map);

                    isMouseDown = Mouse.GetState().LeftButton == ButtonState.Pressed;

                    //Update MultiPlayer if your playing MultiPlayer
                    if (!gameSession.player.isSinglePlayer && gameSession.tcpGame != null)
                    {
                        if (gameSession.player.hp == 0)
                            gameSession.player.gold = 0;
                        gameSession.sharedModule.Update();
                        gameSession.multiMobWave.Update(gameTime);
                    }
                    else if (gameSession.player.isSinglePlayer)
                    {
                        gameSession.mobWaves[gameSession.mobWave].Update();
                        if (gameSession.mobWaves[gameSession.mobWave].IsWaveOver() && gameSession.AmmountOfMonsterOnField() == 0)
                            if ((gameSession.mobWave + 1) != gameSession.mobWaves.Count)
                            {
                                gameSession.mobWave++;
                                gameSession.player.gold += gameSession.sharedModule.UpdateSPIncome(gameSession.mobWave);
                            }
                            else
                                gameSession.YouWin();
                    }

                    foreach (GameObject s in gameSession.animations)
                        s.Update(ref gameSession.listToPrint);
                    foreach (GameObject s in gameSession.listToPrint)
                    {
                        if (s.Update(ref gameSession.listToPrint))
                            garbageList.Add(s);

                        if (s.type == "Tower")
                        {
                            Tower fi = (Tower)s;
                            if (fi.TrackingPorj != null)
                            {
                                bufferListToPrint.Add(fi.TrackingPorj);
                                fi.TrackingPorj = null;
                            }
                        }
                        if (s.type == "Monster")
                        {
                            Monster tmp = (Monster)s;
                            if (!tmp.Alive)
                            {
                                if (!gameSession.player.isSinglePlayer)
                                {
                                    gameSession.multiMobWave.monstersInThisWave--;
                                    if (gameSession.multiMobWave.monstersInThisWave == 0)
                                        gameSession.sharedModule.KilledLastMonster();
                                }
                                //Gives money if player kills monster else lower player life.
                                if (tmp.IsKileldByPlayer)
                                {
                                    gameSession.player.gold += gameSession.sharedModule.GetBountyForMonster(tmp.typeID);
                                    gameSession.player.monsterkilled++;
                                }
                                else
                                {
                                    if (!gameSession.player.isSinglePlayer)
                                    {
                                        gameSession.sharedModule.RecruitMonster(tmp.typeID, (int)tmp.ReduceHP(0));
                                        if (gameSession.player.hp > 0)
                                        {
                                            gameSession.sharedModule.TakeDamage(1, tmp.ownerID);
                                            foreach (Player p in gameSession.otherPlayer)
                                                if (p.id == tmp.ownerID)
                                                    p.hp++;
                                        }
                                    }
                                    if (gameSession.player.hp > 0)
                                        gameSession.player.hp--;
                                    else
                                        gameSession.player.gold = 0;

                                }
                            }
                        }
                    }
                    //Cleaning time!
                    foreach (GameObject s in bufferListToPrint)
                        gameSession.listToPrint.Add(s);
                    bufferListToPrint.Clear();
                    tot_time -= 33;
                }
            }
            else //What to do in menu
            {
                if (gameSession.mainMenu.Update(ref gameSession, gameTime))
                {
                    UnloadContent();
                    LoadContent();
                }
            }
            base.Update(gameTime);
        }

        /// <summary>
        /// Grafikmotorn som ritar ut allt i spelet
        /// </summary>
        /// <param name="gameTime">GameTime, information om hur länge spelet varit igång</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);
            //Begin the drawing
            spriteBatch.Begin(SpriteSortMode.Immediate, BlendState.AlphaBlend);


            if (gameSession.mainMenu.GameStart)
            {
                //Prints Everything expect Hiddens stuffs like Path
                gameSession.map.Draw(spriteBatch, 0, 0);
                foreach (GameObject s in gameSession.listToPrint)
                    s.Draw(spriteBatch, gameSession.map.Rec.X, gameSession.map.Rec.Y);
                foreach(GameObject s in gameSession.animations)
                    s.Draw(spriteBatch, gameSession.map.Rec.X, gameSession.map.Rec.Y);

                //Draws the userinfterface
                gameSession.ui.Draw(spriteBatch, gameTime);
                //if mouse is not visible then draw tower instead of mouse
                if (!IsMouseVisible)
                {
                    if (checkIfTowerNotOnLocation(new Rectangle(Mouse.GetState().X-25,Mouse.GetState().Y-25, 50,50)))
                        spriteBatch.Draw(txt2DBuildCircleGreen, new Rectangle(Mouse.GetState().X - (int)(myCurrentTower.range), Mouse.GetState().Y - (int)(myCurrentTower.range), (int)(myCurrentTower.range*2), (int)(myCurrentTower.range*2)), Color.White);
                    else
                        spriteBatch.Draw(txt2DBuildCircleRed, new Rectangle(Mouse.GetState().X - (int)(myCurrentTower.range), Mouse.GetState().Y - (int)(myCurrentTower.range), (int)(myCurrentTower.range * 2), (int)(myCurrentTower.range * 2)), Color.White);
                    spriteBatch.Draw(myCurrentTower.Text2D, new Rectangle(Mouse.GetState().X - 25, Mouse.GetState().Y - 25, 50, 50), Color.White);
                }
                //om det finns i garbage
                if (garbageList.Count > 0)
                {
                    foreach (GameObject s in garbageList)
                        gameSession.listToPrint.Remove(s);
                    //då tömmerman garbage
                    garbageList.Clear();
                }
            }
            else //What to do in menu
            {
                if (gameSession.s != GameSession.State.INGAME)
                {
                    if (gameSession.s == GameSession.State.WIN)
                        spriteBatch.Draw(txtWin, new Rectangle(0, 0, graphics.PreferredBackBufferWidth, graphics.PreferredBackBufferHeight), Color.White);
                    else
                        spriteBatch.Draw(txtLose, new Rectangle(0, 0, graphics.PreferredBackBufferWidth, graphics.PreferredBackBufferHeight), Color.White);
                }
                else
                    gameSession.mainMenu.Draw(spriteBatch);
            }

            //End draw
            spriteBatch.End();
            base.Draw(gameTime);
        }

        /// <summary>
        /// Cheack that Rectangle is on place where there is no tower or
        /// hidden rectangles, the hidden rectangles marks places where the path is.
        /// </summary>
        /// <param name="test">A rectangle at the location where you cheack if theres a tower</param>
        /// <returns>True if Tower not On Location else false</returns>
        private bool checkIfTowerNotOnLocation(Rectangle test)
        {
            // float x och float y är muspositionen.
            //Från den positionen ritar vi en låtsas Test rektangel, som kollar sen om den intersectar med någon av de som finns i den listan av redan utplaserade torn
            foreach (GameObject item in gameSession.listToPrint)
            {
                if (item.type == "Ermac")
                {
                    Hidden hidden = (Hidden)item;
                    if (test.Intersects(new Rectangle(hidden.Rec.X + gameSession.map.Rec.X, hidden.Rec.Y + gameSession.map.Rec.Y, hidden.Rec.Width, hidden.Rec.Height)))
                        return false;
                }
                if (item.type == "Tower")
                {
                    Tower tmp = (Tower)item;
                    if (test.Intersects(new Rectangle(tmp.Rec.X + gameSession.map.Rec.X, tmp.Rec.Y + gameSession.map.Rec.Y, tmp.Rec.Width, tmp.Rec.Height)))
                        return false;
                }
            }
            return true;
        }
        /// <summary>
        /// Calls that takes input from server.
        /// </summary>
    }
}
